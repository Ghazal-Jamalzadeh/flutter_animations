Fade Out Animation----------------------------------------------------------------------------------
برای این انیمیشن از تغییر اوپاسیتی استفاده میکنیم
برای این منظور ویجتی که میخوایم این انیمشن روش اعمال شه رو داخل یک ویجتی میذاریم به اسم AnimatedOpacity
دو تا اتربیوت داره
 duration: مدت زمان اجرای انیمیشن ,
 opacity: یک مقدار دابل هست از صفر تا یک,

Transition Animation--------------------------------------------------------------------------------
باید داخل استک و یک ویجت دیگه به اسم انیمتد استک قرار بگیره

Curve-----------------------------------------------------------------------------------------------
روی تمام انیمیشن های موجود میشه کرو ست کرد

برای مشاهده همه curve ها به آدرس زیر مراجعه کنید
https://api.flutter.dev/flutter/animation/Curves-class.html

Animation Controller--------------------------------------------------------------------------------
کلاس انیمشن کنترلر رو زمانی استفاده میکنید که معمولا میخواید انیمشن های پیچیده رو پیاده سازی کنید
کلا روش های پیاده سازی انیمیشن توی فلاتر خیلی زیاده
انیمیشن های معروف رو که خیلی راحت میشه به روش هایی که یاد گرفتیم پیاده سازی کنیم
برای ساخت انیمیشن های ترکیبی از این روش استفاده میکنیم

1-
برای شروع یک نمونه از AnimationController می سازیم

2-
یک پارامتر اجباری دارد
vsync :
برای اینکه بتونیم پارامتر مورپ نیاز این رو بهش پاس بدیم

3-
میایم توی کلاسمون از یک میکسین استفاده میکنیم به اسم
SingleTickerProviderStateMixin

اسم طولانی ای داره ولی کاری که میکنه خیلی ساده است
شما زمانی که یک انیمیشن رو میسازید و میخواید اون انیمیشن رو اجرا کنید
ممکنه دیگه این صصفحه در دسترس کاربر نباشه و یک صفحه دیگه روش اومده باشه
این سینگل تیکر همیشه چک میکنه که اگه این ویجت در حال نمایش به کاربر بود و فعال بود
انیمیشن اجرا بشه
در غیر این صورت انیمشن رو اجرا نکنه که باعث بهبود پرفورمنس اپ بشه

اگر توی کلاستون یک اینستنس از AnimationController داشته باشید از SingleTickerProviderStateMixin استفاده میکنید
اگر چند تا دارید از ThickerProviderMixin استفاده میکنید

4-
چون موقع initialize کردن کلاس به کلمه کلیدی this دسترسی نداریم
برای مقداردهی AnimationController حتما باید از late استفاده کنیم

5-
حتما توی dispose ویجت این AnimationController رو دیسپوز کنید
این برای جلوگیری از بروز مشکل مموری لیک هست

6-
توی initState بیاید یک لیسنر روی AnimationController ست کنید
این گوش میده و و هر زمان تغییری روی انیمیشن صورت بگیره این بلاک کد اجرا میشه
ما میگیم ست استیت کن که این ویجت دوباره ساخته بشه

7-
حالا اگه بیام این کانتیرم رو روی ویجت اوپاسیتی بذارم
(اوپاسیتی خالی نه انیمیتد اوپاسیتی)
میایم این کنترلر رو بهش میدم

8-
روی کلیک دکمه که میخوایم این انیمیشن اجرا شه کد زیر رو مینویسیم
  if(!animationController.isCompleted) {
                animationController.forward();
              }else{
                animationController.reverse() ;
              }
 ما همیشه یک حالت آغازین داریم برای انیمیشن و یک حالت پایانی
 با کد بالا بین این دو صحنه جا به جا میشیم در اصل

9-
خروجی کد فرقی با روش اول پیاده سازیش نداره
ولی این هم باید بلد باشیم
قابلیت های خیلی پیشرفته تری میده و دستمون باز تره کلا

ولی کدی که نوشتیم بهینه نیس اصلا
و ۳۲ بار فانکشن بیلد در یک بار اجرای انیمیشن صدا زده میشه
کل ویجت تیری ۳۲ بار ساخته شده
علتش چیه؟
چون ما توی اینیت استیت اومدیم ست استیت رو صدا زدیم توی لیسنر

راه حلش اینه اون بلاک اینیت استیت رو به کلی پاک کنیم
بعد بیایم اون کانتینر رو بذاریم داخل یک ویجتی به اسم

کد زیر رو تبدیل میکنیم
Opacity(
   opacity: animationController.value,
   child: Container(
     width: 140,
     height: 140,
     decoration: BoxDecoration(
         color: Colors.lightGreenAccent,
         borderRadius: BorderRadius.circular(16)),
   ),
 ),

 به کد زیر:
 AnimatedBuilder(
   builder: (context, child) => Opacity(
     opacity: animationController.value,
     child: Container(
       width: 140,
       height: 140,
       decoration: BoxDecoration(
           color: Colors.lightGreenAccent,
           borderRadius: BorderRadius.circular(16)),
     ),
   ),
   animation: animationController,
 ),

 با اینکه هر دو یک کار رو انجام میدن کد پایین از نظر پرفورمنسی خیلی خیلی بهینه تره
 روش انیمیتدد اوپاسیتی هم کاملا بهینه است چون فقط روی فرزندان خودش اعمال میکنه بیلد رو نه کل درخت

 همچنین میتونیم قابلیت هایی مثل ریپیت رو به کنترلرمون بدیم که حالت چشمک زن رو ایجاد کنه مثلا

پیاده سازی انیمیشن های ترکیبی با استفاده از انیمیشن کنترلر------------------------------------------
color + scale + opacity
1-
یک اینستنس از انیمیشن می سازیم از  نوع color

به این حالتی که مثلا وقتی یک انیمیشن میسازیم
دو تا صحنه داریم
مثلا از آبی میریم به سبز
به این حالت میگن tween
بنابراین از یک کلاسی استفاده میکنیم به اسم colorTween
که زمانی استفاده میشه که میخوایم از یک رنگی به رنگ دیگه بریم
دو تا اتریبیوت داره که رنگ آغازی و پایانی هست

بعد یک متدی داری به اسم animate
این به عنوان پارامتر ورودی یک پرنت میخواد که بهش انیمیشن کنترلر رو پاس میدیم

پس ما یک انیمیشن اینجا داریم و یک انیمیشن کنترلر
late final Animation<Color?> colorTween = ColorTween(begin: Colors.pinkAccent , end: Colors.amberAccent).animate(animationController);

2-
حالا میریم داخل ویجت و به جای color که بهش داده بودیم colorTween.value رو میدیم
خود ویجت هم باید داخل AnimatedBuilder باشه

3-
برای انیمیشن اوپاسیتی یک انیمیشن میسازیم از نوع دابل
چون مقدار اوپاسیتی همیشه یک عدد دابل هست

4-
همون کانتینر داخل AnimatedBuilder رو میایم میذاریم داخل یک ویجت opacity

5-
انیمیشن اسکیل هم از نوع دابل هست

6-
همون کانتینری که داریم رو میایم طول و عرضشو ضربدر این ولیو مربوط به انیمیشن اسکیل میکنیم

7-
حالا اگه بخوایم به جای انیمیشن کنترلر به متد انیمیشن curve پاس بدیم چی؟
یک اینستنس از CurvedAnimation میدیم بهش
پارامتر اولش همون انیمیشن کنترلر میشه
پارامتر دومش curve مورد نظرمون میشه